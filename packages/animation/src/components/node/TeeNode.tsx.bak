import type { CSSProperties } from "react";
import { Handle, Position } from "@xyflow/react";
import { useFlowSim } from "@/store/useFlowSim";

type Orientation = "N" | "S" | "E" | "W";

const handleStyle = (bg: string, overrides: CSSProperties): CSSProperties => ({
  width: 10,
  height: 10,
  borderRadius: 999,
  background: bg,
  border: "2px solid #334155",
  ...overrides,
});

const ROTATION_MAP: Record<Orientation, number> = {
  E: 0,
  S: 90,
  W: 180,
  N: 270,
};

interface HandleConfig {
  inPos: Position;
  inStyle: CSSProperties;
  outMainPos: Position;
  outMainStyle: CSSProperties;
  outBranchPos: Position;
  outBranchStyle: CSSProperties;
}

const CONFIGS: Record<Orientation, HandleConfig> = {
  E: {
    inPos: Position.Left,
    inStyle: handleStyle("#1E90FF", { left: -7, top: "50%", transform: "translate(-50%,-50%)" }),
    outMainPos: Position.Right,
    outMainStyle: handleStyle("#0EAD69", { right: -7, top: "50%", transform: "translate(50%,-50%)" }),
    outBranchPos: Position.Bottom,
    outBranchStyle: handleStyle("#0EAD69", { bottom: -7, left: "50%", transform: "translate(-50%,50%)" }),
  },
  W: {
    inPos: Position.Right,
    inStyle: handleStyle("#1E90FF", { right: -7, top: "50%", transform: "translate(50%,-50%)" }),
    outMainPos: Position.Left,
    outMainStyle: handleStyle("#0EAD69", { left: -7, top: "50%", transform: "translate(-50%,-50%)" }),
    outBranchPos: Position.Top,
    outBranchStyle: handleStyle("#0EAD69", { top: -7, left: "50%", transform: "translate(-50%,-50%)" }),
  },
  N: {
    inPos: Position.Bottom,
    inStyle: handleStyle("#1E90FF", { bottom: -7, left: "50%", transform: "translate(-50%,50%)" }),
    outMainPos: Position.Top,
    outMainStyle: handleStyle("#0EAD69", { top: -7, left: "50%", transform: "translate(-50%,-50%)" }),
    outBranchPos: Position.Left,
    outBranchStyle: handleStyle("#0EAD69", { left: -7, top: "50%", transform: "translate(-50%,-50%)" }),
  },
  S: {
    inPos: Position.Top,
    inStyle: handleStyle("#1E90FF", { top: -7, left: "50%", transform: "translate(-50%,-50%)" }),
    outMainPos: Position.Bottom,
    outMainStyle: handleStyle("#0EAD69", { bottom: -7, left: "50%", transform: "translate(-50%,50%)" }),
    outBranchPos: Position.Right,
    outBranchStyle: handleStyle("#0EAD69", { right: -7, top: "50%", transform: "translate(50%,-50%)" }),
  },
};

export default function TeeNode(props: any) {
  const { id, data } = props;
  const orientation: Orientation = data?.orientation || "E";
  const rotation = ROTATION_MAP[orientation] ?? 0;
  const handles = CONFIGS[orientation] ?? CONFIGS.E;

  const { flowingNodes } = useFlowSim();
  const flowing = id ? flowingNodes.has(id) : false;
  const dashColor = flowing ? "#16a34a" : "#9ca3af";
  const dashStyle: React.CSSProperties = flowing
    ? { animation: `pipe-dash-move 1.1s linear infinite` }
    : { animation: "none", strokeDashoffset: 0 };

  return (
    <div style={{ width: 140, height: 110, position: "relative" }}>
      <svg
        width="140"
        height="110"
        viewBox="0 0 140 110"
        style={{ transform: `rotate(${rotation}deg)` }}
      >
        <defs>
          <linearGradient id="teeBody" x1="0" y1="0" x2="1" y2="0">
            <stop offset="0%" stopColor="#cbd5e1" />
            <stop offset="100%" stopColor="#94a3b8" />
          </linearGradient>
        </defs>
        {/* main run */}
        <rect
          x="14"
          y="44"
          width="112"
          height="22"
          rx="11"
          fill="url(#teeBody)"
          stroke="#334155"
          strokeWidth="3"
        />
        {/* branch */}
        <rect
          x="59"
          y="44"
          width="22"
          height="52"
          rx="11"
          fill="url(#teeBody)"
          stroke="#334155"
          strokeWidth="3"
        />
        {/* end-cap */}
        <rect
          x="56"
          y="84"
          width="28"
          height="26"
          rx="13"
          fill="#94a3b8"
          stroke="#334155"
          strokeWidth="3"
        />
        <rect x="60" y="88" width="20" height="18" rx="9" fill="#e2e8f0" />
        {/* inner highlight */}
        <rect x="20" y="48" width="100" height="14" rx="7" fill="#e2e8f0" />
        <rect x="63" y="48" width="14" height="44" rx="7" fill="#e2e8f0" />

        {/* flow animation */}
        <line
          x1="24"
          y1="55"
          x2="116"
          y2="55"
          stroke={dashColor}
          strokeWidth="6"
          strokeDasharray="12 10"
          style={dashStyle as any}
          strokeLinecap="round"
        />
        <line
          x1="70"
          y1="52"
          x2="70"
          y2="96"
          stroke={dashColor}
          strokeWidth="6"
          strokeDasharray="12 10"
          style={dashStyle as any}
          strokeLinecap="round"
        />
      </svg>

      <Handle id="in-main" type="target" position={handles.inPos} style={handles.inStyle} />
      <Handle id="out-main" type="source" position={handles.outMainPos} style={handles.outMainStyle} />
      <Handle id="out-branch" type="source" position={handles.outBranchPos} style={handles.outBranchStyle} />
    </div>
  );
}
